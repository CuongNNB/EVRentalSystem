package com.evrental.evrentalsystem.exception;

import com.evrental.evrentalsystem.response.ApiResponse;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.method.annotation.MethodArgumentTypeMismatchException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

import java.util.Arrays;

@RestControllerAdvice
public class GlobalExceptionHandler {
    // üß© B·∫Øt l·ªói enum ho·∫∑c ki·ªÉu d·ªØ li·ªáu sai (VD: PartCarName kh√¥ng h·ª£p l·ªá)
    @ExceptionHandler(MethodArgumentTypeMismatchException.class)
    public ResponseEntity<ApiResponse<Boolean>> handleTypeMismatch(MethodArgumentTypeMismatchException ex) {
        if (ex.getRequiredType() != null && ex.getRequiredType().isEnum()) {
            // N·∫øu l√† enum (nh∆∞ PartCarName)
            String enumName = ex.getRequiredType().getSimpleName();
            Object[] acceptedValues = ex.getRequiredType().getEnumConstants();
            return ResponseEntity.badRequest().body(
                    ApiResponse.error(
                            "Invalid value for " + enumName + ". Accepted values: " +
                                    Arrays.toString(acceptedValues),
                            false
                    )
            );
        }

        // N·∫øu l·ªói kh√¥ng ph·∫£i enum
        return ResponseEntity.badRequest().body(
                ApiResponse.error("Invalid request parameter type: " + ex.getMessage(), false)
        );
    }

    // üß© B·∫Øt c√°c l·ªói IllegalArgument (VD: Booking ID kh√¥ng t·ªìn t·∫°i, Staff ID kh√¥ng t·ªìn t·∫°i)
    @ExceptionHandler(IllegalArgumentException.class)
    public ResponseEntity<ApiResponse<Boolean>> handleIllegalArgument(IllegalArgumentException ex) {
        return ResponseEntity.badRequest()
                .body(ApiResponse.error(ex.getMessage(), false));
    }

    // üß© B·∫Øt l·ªói chung (server, null pointer, v.v.)
    @ExceptionHandler(Exception.class)
    public ResponseEntity<ApiResponse<Boolean>> handleGeneralException(Exception ex) {
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(ApiResponse.error("Internal server error: " + ex.getMessage(), false));
    }
}
