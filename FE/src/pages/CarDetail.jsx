import { useState, useEffect } from "react";
import { useParams, useNavigate, useLocation } from "react-router-dom";
import Header from "../components/Header";
import Footer from "../components/Footer";
import { useAuth } from "../contexts/AuthContext";
import "./CarDetail.css";

export default function CarDetail() {
    const { id } = useParams();
    const navigate = useNavigate();
    const location = useLocation();
    const carFromList = location.state;

    const { user: contextUser } = useAuth();
    const localUser = typeof window !== 'undefined' ? JSON.parse(localStorage.getItem("ev_user")) : null;
    const currentUser = contextUser || localUser;

    const [carData, setCarData] = useState(null);
    const [currentImageIndex, setCurrentImageIndex] = useState(0);
    const [isFading, setIsFading] = useState(false);

    // overlay for not-logged-in error
    const [loginOverlay, setLoginOverlay] = useState({ visible: false, message: "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë·∫∑t xe." });

    useEffect(() => {
        if (loginOverlay.visible) {
            const t = setTimeout(() => setLoginOverlay({ visible: false, message: "" }), 6000);
            return () => clearTimeout(t);
        }
    }, [loginOverlay.visible]);

    // üñºÔ∏è T·ª± ƒë·ªông ƒë·ªïi ·∫£nh m·ªói 5s
    useEffect(() => {
        if (!carData?.images || carData.images.length === 0) return;
        const interval = setInterval(() => {
            setIsFading(true);
            setTimeout(() => {
                setCurrentImageIndex((prev) =>
                    prev === carData.images.length - 1 ? 0 : prev + 1
                );
                setIsFading(false);
            }, 500);
        }, 5000);
        return () => clearInterval(interval);
    }, [carData, currentImageIndex]);

    // üöó Fetch chi ti·∫øt xe t·ª´ backend
    useEffect(() => {
        const fetchCarDetail = async () => {
            try {
                const res = await fetch(`http://localhost:8084/EVRentalSystem/api/vehicles/${id}`);
                if (!res.ok) throw new Error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu xe");
                const data = await res.json();

                // ‚úÖ D√πng ·∫£nh t·ª´ CarPages n·∫øu c√≥, ho·∫∑c ·∫£nh t·ª´ API
                const imagePath =
                    carFromList?.images?.[0] ||
                    (data.picture ? `/carpic/${data.picture}` : "/anhxe/default.jpg");

                // ‚úÖ T·∫°o 4 ·∫£nh gi·ªëng nhau
                const imagesArray = Array(4).fill(imagePath);

                const mappedCar = {
                    id: data.id,
                    name: data.model ? `${data.brand} ${data.model}` : data.brand,
                    brand: data.brand,
                    color: data.color,
                    price: data.price || 0,
                    currency: "VND",
                    period: "1 ng√†y",
                    images: imagesArray,
                    stationName: data.stationName || carFromList?.stationName || "Kh√¥ng r√µ tr·∫°m",
                    stationId: data.stationId || carFromList?.stationId || 1,
                    description: `
            <strong>${data.brand} ${data.model}</strong> l√† d√≤ng xe ƒëi·ªán hi·ªán ƒë·∫°i, 
            th√¢n thi·ªán v·ªõi m√¥i tr∆∞·ªùng v√† ti·∫øt ki·ªám chi ph√≠ v·∫≠n h√†nh. 
            Xe hi·ªán ƒëang c√≥ m·∫∑t t·∫°i <strong>${data.stationName || carFromList?.stationName || "tr·∫°m EV g·∫ßn b·∫°n"}</strong>, 
            mang m√†u s·∫Øc <strong>${data.color}</strong> c√πng t√¨nh tr·∫°ng 
            <strong>${data.status === "AVAILABLE" ? "s·∫µn s√†ng cho thu√™" : data.status}</strong>. 
            Gi√° thu√™ ch·ªâ <strong>${new Intl.NumberFormat("vi-VN").format(data.price * 1000)} VND/ng√†y</strong>.
          `,
                    specifications: {
                        seats: data.seats ?? 5,
                        transmission: "T·ª± ƒë·ªông",
                        power: data.batteryCapacity ?? "Kh√¥ng x√°c ƒë·ªãnh",
                        range: "210 km (∆∞·ªõc l∆∞·ª£ng)",
                        airbags: 2,
                        type: data.status ?? "ƒêang ho·∫°t ƒë·ªông",
                        chargeTime: "Kho·∫£ng 45 ph√∫t (s·∫°c nhanh)",
                        costPerKm: "Kho·∫£ng 400‚Ç´/km",
                    },
                    equipment: ["ABS", "Cruise Control", "Camera l√πi", "Bluetooth", "C·∫£m bi·∫øn va ch·∫°m"],
                    features: ["Thi·∫øt k·∫ø hi·ªán ƒë·∫°i", "C√¥ng ngh·ªá ti√™n ti·∫øn", "An to√†n t·ªëi ƒëa", "Ti·∫øt ki·ªám nƒÉng l∆∞·ª£ng", "Tr·∫£i nghi·ªám l√°i √™m √°i"],
                };

                // ‚úÖ Merge d·ªØ li·ªáu t·ª´ CarPages (n·∫øu c√≥)
                const mergedCar = {
                    ...mappedCar,
                    stationName: carFromList?.stationName || mappedCar.stationName,
                    stationId: carFromList?.stationId || mappedCar.stationId,
                    images: Array(4).fill(
                        carFromList?.images?.[0] || mappedCar.images?.[0] || "/anhxe/default.jpg"
                    ),
                };

                setCarData(mergedCar);
            } catch (err) {
                console.error("L·ªói khi t·∫£i d·ªØ li·ªáu xe:", err);
            }
        };

        fetchCarDetail();
    }, [id]);

    const formatPrice = (price) => new Intl.NumberFormat("vi-VN").format(price * 1000);

    // ‚úÖ Khi b·∫•m "ƒê·∫∑t xe ngay"
    const handleBookCar = () => {
        if (!carData) return;

        // Ki·ªÉm tra login: ∆∞u ti√™n context, fallback localStorage (ev_user)
        if (!currentUser) {
            setLoginOverlay({ visible: true, message: "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë·∫∑t xe. Vui l√≤ng ƒëƒÉng nh·∫≠p ho·∫∑c ƒëƒÉng k√Ω." });
            return;
        }

        navigate(`/booking/${carData.id}`, { state: carData });
    };

    if (!carData) return null;

    return (
        <div className="car-detail-page">
            <Header />
            <main className="car-detail-main">
                <div className="car-detail-container">
                    <nav className="breadcrumb">
                        <button onClick={() => navigate("/")} className="breadcrumb-link">
                            Trang ch·ªß
                        </button>
                        <span className="breadcrumb-separator">/</span>
                        <button
                            onClick={() => navigate("/cars")}
                            className="breadcrumb-link"
                        >
                            Xem xe c√≥ s·∫µn
                        </button>
                        <span className="breadcrumb-separator">/</span>
                        <span className="breadcrumb-current">{carData.name}</span>
                    </nav>

                    <div className="car-detail-content">
                        {/* üñºÔ∏è C·ªôt tr√°i - h√¨nh ·∫£nh */}
                        <div className="car-images-section">
                            <div className="main-image-container">
                                <img
                                    src={carData.images[currentImageIndex]}
                                    alt={carData.name}
                                    className={`main-image ${isFading ? "fade-out" : ""}`}
                                />
                            </div>

                            {/* ‚úÖ 4 h√¨nh nh·ªè ph√≠a d∆∞·ªõi */}
                            <div className="thumbnail-gallery">
                                {carData.images.map((image, i) => (
                                    <button
                                        key={i}
                                        className={`thumbnail ${currentImageIndex === i ? "active" : ""}`}
                                        onClick={() => setCurrentImageIndex(i)}
                                    >
                                        <img src={image} alt={`${carData.name} ${i + 1}`} />
                                    </button>
                                ))}
                            </div>
                        </div>

                        {/* üìã C·ªôt ph·∫£i - th√¥ng tin xe */}
                        <div className="car-info-section">
                            <div className="car-header">
                                <div className="car-brand">{carData.brand}</div>
                                <h1 className="car-name">{carData.name}</h1>
                                <div className="car-price">
                                    <span className="price-amount">{formatPrice(carData.price)}</span>
                                    <span className="price-currency">VND</span>
                                    <span className="price-period">/ {carData.period}</span>
                                </div>
                            </div>

                            <div className="car-specifications">
                                <h3 className="section-title">Th√¥ng s·ªë k·ªπ thu·∫≠t</h3>
                                <div className="specs-grid">
                                    <div className="spec-item"><div className="spec-icon">üë•</div><div className="spec-content"><span className="spec-value">{carData.specifications.seats}</span><span className="spec-label">Ch·ªó ng·ªìi</span></div></div>
                                    <div className="spec-item"><div className="spec-icon">‚öôÔ∏è</div><div className="spec-content"><span className="spec-value">{carData.specifications.transmission}</span><span className="spec-label">H·ªôp s·ªë</span></div></div>
                                    <div className="spec-item"><div className="spec-icon">‚ö°</div><div className="spec-content"><span className="spec-value">{carData.specifications.power}</span><span className="spec-label">C√¥ng su·∫•t pin</span></div></div>
                                    <div className="spec-item"><div className="spec-icon">üîã</div><div className="spec-content"><span className="spec-value">{carData.specifications.range}</span><span className="spec-label">T·∫ßm ho·∫°t ƒë·ªông</span></div></div>
                                    <div className="spec-item"><div className="spec-icon">üí∏</div><div className="spec-content"><span className="spec-value">{carData.specifications.costPerKm}</span><span className="spec-label">Chi ph√≠ / km</span></div></div>
                                    <div className="spec-item"><div className="spec-icon">‚è±Ô∏è</div><div className="spec-content"><span className="spec-value">{carData.specifications.chargeTime}</span><span className="spec-label">Th·ªùi gian s·∫°c</span></div></div>
                                </div>
                            </div>

                            <div className="car-equipment">
                                <h3 className="section-title">Trang b·ªã</h3>
                                <div className="equipment-grid">
                                    {carData.equipment.map((item, i) => (
                                        <div key={i} className="equipment-item">
                                            <span className="equipment-icon">‚úì</span>
                                            <span className="equipment-text">{item}</span>
                                        </div>
                                    ))}
                                </div>
                            </div>

                            <div className="car-features">
                                <h3 className="section-title">T√≠nh nƒÉng n·ªïi b·∫≠t</h3>
                                <ul className="features-list">
                                    {carData.features.map((feature, i) => (
                                        <li key={i} className="feature-item">
                                            <span className="feature-icon">‚ú®</span>
                                            <span className="feature-text">{feature}</span>
                                        </li>
                                    ))}
                                </ul>
                            </div>

                            <div className="car-description">
                                <h3 className="section-title">M√¥ t·∫£</h3>
                                <p
                                    className="description-text"
                                    dangerouslySetInnerHTML={{ __html: carData.description }}
                                ></p>
                            </div>

                            {/* ‚úÖ N√∫t ƒë·∫∑t xe */}
                            <div className="booking-section">
                                <p className="station-info">üìç {carData.stationName}</p>
                                <button className="book-button" onClick={handleBookCar}>
                                    ƒê·∫∑t xe ngay
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                {/* Login required overlay */}
                {loginOverlay.visible && (
                    <div className="login-overlay">
                        <div className="login-overlay-content">
                            <h3>B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p</h3>
                            <p>{loginOverlay.message}</p>
                            <div className="login-overlay-actions">
                                <button className="login-btn" onClick={() => navigate('/login')}>
                                    ƒêƒÉng nh·∫≠p
                                </button>
                                <button className="close-btn" onClick={() => setLoginOverlay({ visible: false, message: '' })}>
                                    ƒê√≥ng
                                </button>
                            </div>
                        </div>
                    </div>
                )}

            </main>
            <Footer />
        </div>
    );
}