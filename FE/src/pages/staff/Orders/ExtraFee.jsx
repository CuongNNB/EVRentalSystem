
import React, { useEffect, useMemo, useState } from "react";
import { useNavigate, useParams } from "react-router-dom";
import StaffSlideBar from "../../../components/staff/StaffSlideBar";
import StaffHeader from "../../../components/staff/StaffHeader";
import api from "../../../utils/api";
import "../StaffLayout.css";
import "./ExtraFee.css";

const FEE_TYPES = [
    { value: "", label: "-- Ch·ªçn lo·∫°i ph√≠ --" },
    { value: "damage", label: "Ph√≠ h∆∞ h·ªèng", enumValue: "Damage_Fee" },
    { value: "cleaning", label: "Ph√≠ v·ªá sinh", enumValue: "Cleaning_Fee" },
    { value: "other", label: "Chi ph√≠ kh√°c", enumValue: "Other_Fee" },
];

// Map type to enum value
const mapTypeToEnum = (type) => {
    // support types that are not shown in the dropdown but valid on the backend
    if (type === "over_mileage") return "Over_Mileage_Fee";
    if (type === "fuel") return "Fuel_Fee";

    const feeType = FEE_TYPES.find(ft => ft.value === type);
    return feeType?.enumValue || "Other_Fee";
};

const DEFAULT_ITEM = {
    type: "",
    description: "",
    amount: "0",
};

const formatCurrency = (value) => {
    if (!value) return "0";
    return new Intl.NumberFormat("vi-VN").format(Number(value));
};

const ExtraFee = () => {
    const navigate = useNavigate();
    const { orderId = "EV0001" } = useParams();
    const [fees, setFees] = useState([{ ...DEFAULT_ITEM }]);
    const [submitting, setSubmitting] = useState(false);
    const [toast, setToast] = useState(null);
    // (Reception report & auto-calc removed)

    useEffect(() => {
        if (!toast) return undefined;
        const timeout = setTimeout(() => setToast(null), 2200);
        return () => clearTimeout(timeout);
    }, [toast]);

    // (no preview cleanup - reception report removed)

    const totalAmount = useMemo(
        () =>
            fees.reduce((sum, fee) => {
                const amount = Number(fee.amount);
                return sum + (Number.isFinite(amount) ? amount : 0);
            }, 0),
        [fees]
    );

    const handleChange = (index, key, value) => {
        setFees((prev) =>
            prev.map((item, idx) =>
                idx === index
                    ? {
                        ...item,
                        [key]: key === "amount" ? value.replace(/[^\d]/g, "") : value,
                    }
                    : item
            )
        );
    };

    const handleAddFee = () => {
        setFees((prev) => [...prev, { ...DEFAULT_ITEM }]);
    };

    const handleRemoveFee = (index) => {
        setFees((prev) => prev.filter((_, idx) => idx !== index));
    };

    const validateFees = () => {
        if (!fees.length) return false;
        return fees.every((item) => {
            if (!item.type || !item.description.trim()) return false;

            // Default validation: require amount > 0
            return item.amount && Number(item.amount) > 0;
        });
    };

    const handleSubmit = async (event) => {
        event.preventDefault();
        if (!validateFees()) {
            setToast({
                type: "error",
                message: "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin cho t·ª´ng chi ph√≠ ph√°t sinh.",
            });
            return;
        }

        // No reception report validation (removed)

        setSubmitting(true);

        try {
            // 0. G·ª≠i bi√™n b·∫£n nh·∫≠n xe l√™n BE (n·∫øu c√≥ endpoint).
            // NOTE: Assumption: backend accepts a multipart/form-data POST to `/api/bookings/{orderId}/return-report`
            // with fields: returnTime, batteryLevel, condition, notes and files[] as images.
            // If your backend uses a different route or JSON payload, adapt accordingly.
            // Reception report removed from this flow.

            // 1. T·∫°o c√°c additional fee - track t·ª´ng k·∫øt qu·∫£ ri√™ng bi·ªát
            console.log(`üîÑ ƒêang t·∫°o ${fees.length} ph√≠ ph√°t sinh...`, fees);

            const feeResults = await Promise.allSettled(
                fees.map(async (fee, index) => {
                    // D·ª±ng query theo y√™u c·∫ßu BE
                    const params = new URLSearchParams();
                    params.set("bookingId", orderId);
                    // If fee was generated by auto-calc we store the original computedType in meta
                    const computedType = fee.meta?.computedType || fee.type;
                    params.set("feeName", mapTypeToEnum(computedType));
                    params.set("amount", String(fee.amount ?? ""));
                    params.set("desc", fee.description);

                    console.log(`üì§ G·ª≠i ph√≠ #${index + 1}:`, {
                        type: fee.type,
                        feeName: mapTypeToEnum(computedType),
                        amount: fee.amount,
                        desc: fee.description
                    });

                    return api.post(`/api/additional-fee/create?${params.toString()}`);
                })
            );

            // Ki·ªÉm tra k·∫øt qu·∫£
            const successCount = feeResults.filter(r => r.status === 'fulfilled').length;
            const failedCount = feeResults.filter(r => r.status === 'rejected').length;

            console.log(`‚úÖ Th√†nh c√¥ng: ${successCount}/${fees.length} ph√≠`);
            console.log(`‚ùå Th·∫•t b·∫°i: ${failedCount}/${fees.length} ph√≠`);

            // Log chi ti·∫øt c√°c fee th·∫•t b·∫°i
            feeResults.forEach((result, index) => {
                if (result.status === 'rejected') {
                    console.error(`‚ùå Ph√≠ #${index + 1} th·∫•t b·∫°i:`, result.reason?.response?.data || result.reason);
                }
            });

            if (failedCount > 0) {
                const failedIndexes = feeResults
                    .map((r, i) => r.status === 'rejected' ? i + 1 : null)
                    .filter(i => i !== null);

                setSubmitting(false);
                setToast({
                    type: "error",
                    message: `Kh√¥ng th·ªÉ t·∫°o ${failedCount}/${fees.length} ph√≠ ph√°t sinh (ph√≠ s·ªë ${failedIndexes.join(', ')}).`,
                });
                return;
            }

            // 2. C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng sang "Completed"
            await api.put(`/api/bookings/${orderId}/status`, null, {
                params: { status: "Completed" },
            });

            setSubmitting(false);
            setToast({
                type: "success",
                message: "ƒê√£ g·ª≠i chi ph√≠ ph√°t sinh cho kh√°ch h√†ng v√† ho√†n th√†nh ƒë∆°n h√†ng.",
            });

            setTimeout(() => {
                navigate("/staff/orders", { replace: true });
            }, 1600);
        } catch (error) {
            console.error("Error creating additional fees or updating status:", error);
            setSubmitting(false);
            setToast({
                type: "error",
                message: error.response?.data?.message || "Kh√¥ng th·ªÉ l∆∞u chi ph√≠ ph√°t sinh. Vui l√≤ng th·ª≠ l·∫°i.",
            });
        }
    };

    return (
        <div className="staff-shell staff-shell--orders">
            {toast && (
                <div className={`extra-fee-toast extra-fee-toast--${toast.type}`}>
          <span className="extra-fee-toast__icon" aria-hidden="true">
            {toast.type === "success" ? "‚úÖ" : "‚ö†Ô∏è"}
          </span>
                    <div>
                        <p className="extra-fee-toast__title">Th√¥ng b√°o</p>
                        <p className="extra-fee-toast__message">{toast.message}</p>
                    </div>
                </div>
            )}
            <StaffHeader />
            <div className="staff-layout staff-layout--orders">
                <StaffSlideBar activeKey="orders" />
                <main className="staff-main">
                    <section className="extra-fee">
                        <header className="extra-fee__heading">
                            <p className="extra-fee__eyebrow">Qu·∫£n l√Ω nh·∫≠n xe #{orderId}</p>
                            <h1>Bi√™n b·∫£n v√† Chi ph√≠ ph√°t sinh khi thu√™ xe</h1>
                            <p>
                                Ki·ªÉm tra v√† ghi nh·∫≠n c√°c kho·∫£n chi ph√≠ ph√°t sinh trong qu√° tr√¨nh
                                b√†n giao xe tr·∫£.
                            </p>
                        </header>

                        <form className="extra-fee__form" onSubmit={handleSubmit}>
                            {/* reception report & auto-calc removed */}

                            {fees.map((fee, index) => (
                                <section key={`extra-fee-${index}`} className="extra-fee__card">
                                    <header className="extra-fee__card-header">
                                        <h2>Chi ph√≠ ph√°t sinh #{index + 1}</h2>
                                        {fees.length > 1 && (
                                            <button
                                                type="button"
                                                className="extra-fee__remove"
                                                onClick={() => handleRemoveFee(index)}
                                            >
                                                ‚úï
                                                <span className="sr-only">X√≥a chi ph√≠</span>
                                            </button>
                                        )}
                                    </header>

                                    <label className="extra-fee__field">
                                        <span>Lo·∫°i ph√≠ ph√°t sinh *</span>
                                        <select
                                            value={fee.type}
                                            onChange={(event) =>
                                                handleChange(index, "type", event.target.value)
                                            }
                                            required
                                        >
                                            {FEE_TYPES.map((type) => (
                                                <option key={type.value || "default"} value={type.value}>
                                                    {type.label}
                                                </option>
                                            ))}
                                        </select>
                                    </label>

                                    {/* No special fields for removed fee types (over_mileage, fuel, late) */}

                                    <label className="extra-fee__field">
                                        <span>N·ªôi dung chi ti·∫øt *</span>
                                        <textarea
                                            rows={3}
                                            placeholder="Vui l√≤ng nh·∫≠p n·ªôi dung chi ti·∫øt..."
                                            value={fee.description}
                                            onChange={(event) =>
                                                handleChange(index, "description", event.target.value)
                                            }
                                            required
                                        />
                                    </label>

                                    <label className="extra-fee__field extra-fee__field--inline">
                                        <div>
                                            <span>Ph√≠ ph√°t sinh *</span>
                                            <div className="extra-fee__input">
                                                <input
                                                    type="text"
                                                    inputMode="numeric"
                                                    placeholder="0"
                                                    value={fee.amount}
                                                    onChange={(event) =>
                                                        handleChange(index, "amount", event.target.value)
                                                    }
                                                    required
                                                />
                                                <span className="extra-fee__input-suffix">VNƒê</span>
                                            </div>
                                        </div>
                                    </label>

                                    {/* No calculated info for removed fee types */}
                                </section>
                            ))}

                            <div className="extra-fee__actions">
                                <button
                                    type="button"
                                    className="extra-fee__add"
                                    onClick={handleAddFee}
                                >
                                    <span aria-hidden="true">Ôºã</span> Th√™m ph√≠ ph√°t sinh
                                </button>
                            </div>

                            <footer className="extra-fee__summary">
                                <div>
                                    <p>T·ªïng ph√≠ ph√°t sinh</p>
                                    <h3>{formatCurrency(totalAmount)} VNƒê</h3>
                                </div>
                                <button
                                    type="submit"
                                    className="extra-fee__submit"
                                    disabled={submitting}
                                >
                                    {submitting ? "ƒêang g·ª≠i..." : "G·ª≠i cho kh√°ch"}
                                </button>
                            </footer>
                        </form>
                    </section>
                </main>
            </div>
        </div>
    );
};

export default ExtraFee;


